#!/usr/local/bin/python3
import boto3
import botocore
import os
import subprocess
import argparse
import json
from pathlib import Path
from collections import defaultdict

# Constants

INTERNAL_IMAGE_PREFIX = 'npe-int'
EXTERNAL_IMAGE_PREFIX = 'npe-ots'

SERVICE_IMAGES = [
    'account',
    'account-api',
    'auth',
    'email',
    'sms',
    'sponsor',
    'treatment',
    'proxy',
]

APP_IDS = [
    'ct101',
    'ct132',
    'ct152',
    'ct155',
]

REHOSTS = [
    'datadog-agent',
    'falcon-sensor',
    'postgres',
    'redis-tls',
]


# Arg parsing
def getargs():
    parser = argparse.ArgumentParser(description='Reupload images to an ECR repository')
    parser.add_argument('--account', dest='account', type=str, default='561618220790')
    parser.add_argument('--region', dest='region', type=str, default='us-east-1')
    parser.add_argument('--profile', dest='profile', type=str, default='cicd-dev')
    parser.add_argument('--repositories', '-R', dest='repositories', action='extend', nargs='+', default=[],
                    help='The list of services to deploy')
    args = parser.parse_args()
    # set derived variables
    args.registry = '{account}.dkr.ecr.{region}.amazonaws.com'.format(account=args.account, region=args.region)
    args.boto3_session = boto3.session.Session(profile_name=args.profile, region_name=args.region)
    args.ecr_client = args.boto3_session.client('ecr')
    return args


# ECR helpers
def does_ecr_repository_exist(args, repository_name):
    try:
        response = args.ecr_client.describe_repositories(
            registryId=args.account,
            repositoryNames=[
                repository_name,
            ],
        )
        return True
    except args.ecr_client.exceptions.RepositoryNotFoundException:
        return False

def get_ecr_repository_image_ids(args, repository_name):
    all_image_ids = []
    
    paginator = args.ecr_client.get_paginator('list_images')
    params = {
        'registryId': args.account,
        'repositoryName': repository_name,
        'filter': {
            'tagStatus': 'TAGGED'
        },
    }
    page_iterator = paginator.paginate(**params)
    for page in page_iterator:
        image_ids = page['imageIds']
        all_image_ids.extend(image_ids)
    
    return image_ids

def get_ecr_repository_image_tags_by_digest(args, repository_name):
    image_tags_by_digest = defaultdict(list)
    image_ids = get_ecr_repository_image_ids(args, repository_name)

    for image_id in image_ids:
        image_digest = image_id['imageDigest']
        image_tag = image_id['imageTag']
        image_tags_by_digest[image_digest].append(image_tag)
    
    return image_tags_by_digest


def get_ecr_repository_image_manifest_for_tag(args, repository_name, image_tag):
    response = args.ecr_client.batch_get_image(
        registryId=args.account,
        repositoryName=repository_name,
        imageIds=[
            {
                'imageTag': image_tag
            }
        ],
    )

    images = response['images']

    if len(images) > 1:
        raise Exception('Received multiple images for tag {tag}: {images}'.format(tag=image_tag, images=images))

    return images[0]['imageManifest']

def reupload_ecr_repository_image_tag(args, repository_name, image_manifest, image_tag):
    temp_tag = 'tmp-{tag}'.format(tag=image_tag)
    print('Creating temporary tag: {temp_tag} for tag: {image_tag}'.format(temp_tag=temp_tag, image_tag=image_tag))
    # create temporary (duplicate) tag
    args.ecr_client.put_image(
        registryId=args.account,
        repositoryName=repository_name,
        imageManifest=image_manifest,
        imageTag=temp_tag,
    )
    print('Deleting tag: {image_tag} in preparation of re-upload'.format(image_tag=image_tag))
    # delete tag that needs to be re-uploaded
    args.ecr_client.batch_delete_image(
        registryId=args.account,
        repositoryName=repository_name,
        imageIds=[
            {
                'imageTag': image_tag,
            }
        ]
    )
    print('Re-creating tag: {image_tag}'.format(image_tag=image_tag))
    # re-create tag that needs to be re-uploaded
    args.ecr_client.put_image(
        registryId=args.account,
        repositoryName=repository_name,
        imageManifest=image_manifest,
        imageTag=image_tag,
    )
    print('Deleting temporary tag: {temp_tag} after re-upload'.format(temp_tag=temp_tag))
    # delete temporary (duplicate) tag
    args.ecr_client.batch_delete_image(
        registryId=args.account,
        repositoryName=repository_name,
        imageIds=[
            {
                'imageTag': temp_tag,
            }
        ]
    )
    print()

# Repository name helpers
def repository_names():
    return list(set(click_image_names() + REHOSTS))

def ninja_user_svc_image_basenames():
    return list(map(lambda x: 'ninja-{}-user'.format(x), APP_IDS))

def ninja_image_basenames():
    return ninja_user_svc_image_basenames() + ['ninja-router']

def click_image_basenames():
    return SERVICE_IMAGES + ninja_image_basenames()

def click_image_names():
    click_images = []
    for image_basename in click_image_basenames():
        internal_image_name = '{prefix}-{image}'.format(prefix=INTERNAL_IMAGE_PREFIX, image=image_basename)
        external_image_name = '{prefix}-{image}'.format(prefix=EXTERNAL_IMAGE_PREFIX, image=image_basename)
        click_images.append(internal_image_name)
        click_images.append(external_image_name)
    return click_images


# Main
def main():
    args = getargs()

    print('ECR REUPLOAD:\n')
    print('ECR Registry: {registry}\n\n'.format(registry=args.registry))

    repositories = repository_names()
    print('Repositories: {repositories}'.format(repositories=repositories))
    for repository in repositories:
        repository_exists = does_ecr_repository_exist(args, repository)
        if not repository_exists:
            print('Repository {repository} does not exist.\n'.format(repository=repository))
            continue
        else:
            print('Repository {repository}:\n'.format(repository=repository))
        repository_image_tags_by_digest = get_ecr_repository_image_tags_by_digest(args, repository)
        for image_digest, image_tags in repository_image_tags_by_digest.items():
            print('Reuploading tags for digest {digest}: {tags}\n'.format(digest=image_digest, tags=image_tags))
            for image_tag in image_tags:
                image_manifest_for_tag = get_ecr_repository_image_manifest_for_tag(args, repository, image_tag)
                reupload_ecr_repository_image_tag(args, repository, image_manifest_for_tag, image_tag)
        print()


    exit(0)


if __name__ == '__main__':
    main()

